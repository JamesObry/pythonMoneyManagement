import telebot
import sqlite3 as sq
from telebot import types

with sq.connect("money.db") as con:
    cur = con.cursor()
    cur.execute("""CREATE TABLE IF NOT EXISTS money (
        id INTEGER PRIMARY KEY,
        balance REAL,
        lastStep REAL
    )""")

bot = telebot.TeleBot('1509447385:AAFJ3y-7L5LxizAhDiVR6nPUDRZ8Y3YVVFI')

# keyboards
main = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
mainMoney = types.KeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å üí∏')
mainStats = types.KeyboardButton(text='–ú–æ–π –±–∞–ª–∞–Ω—Å ü§ë')
mainRemoveMoney = types.KeyboardButton(text='–û—á–∏—Å—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å')
mainRemoveLastStep = types.KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå')
main.add(mainMoney, mainStats, mainRemoveMoney, mainRemoveLastStep)

accept = types.InlineKeyboardMarkup()
acceptYes = types.InlineKeyboardButton(text='–î–∞, —è —É–≤–µ—Ä–µ–Ω', callback_data='yes')
acceptNo = types.InlineKeyboardButton(text='–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª', callback_data='no')
accept.add(acceptYes, acceptNo)

removeLastStepBoard = types.InlineKeyboardMarkup(row_width=2)
removeLastStepYes = types.InlineKeyboardButton(text='–î–∞', callback_data='removeLastStepYes')
removeLastStepNo = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='removeLastStepNo')
removeLastStepBoard.add(removeLastStepYes, removeLastStepNo)

@bot.message_handler(commands=['start'])
def startMessagae(message):
    try:
        with sq.connect("money.db") as con:
            cur = con.cursor()
            cur.execute(f"INSERT INTO money(id, balance) VALUES ({message.chat.id}, 0)")
            bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–¢—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—é–¥–∞ —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!', reply_markup=main)
    except:
        bot.send_message(message.chat.id, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–ó–∞–ø–∏—à–∏ –∫–∞–∫—É—é —Å—É–º–º—ã —Ç–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–ª –ø–æ–∫–∞ —Ç–µ–±—è –Ω–µ–±—ã–ª–æ.', reply_markup=main)

@bot.message_handler(regexp='–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å üí∏')
def money(message):
    with sq.connect("money.db") as con:
        cur = con.cursor()
        cur.execute(f"select balance from money where id = {message.chat.id}")
        balance = cur.fetchone()[0]
        bot.send_message(message.chat.id, f'–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} üí∏\n–£–∫–∞–∂—ã –∫–∞–∫—É—é —Å—É–º–º—É —Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª ? ( –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö )')
        bot.register_next_step_handler(message, moneyUpdate)
def moneyUpdate(message):
    newBalance = message.text
    try:
        with sq.connect("money.db") as con:
            cur = con.cursor()
            cur.execute(f"update money set lastStep = {newBalance} where id = {message.chat.id}")
            cur.execute(f"update money set balance = balance + {newBalance} where id = {message.chat.id}")
            cur.execute(f"select balance from money where id = {message.chat.id}")
            balance = cur.fetchone()[0]
            bot.send_message(message.chat.id, f'–£—Å–ø–µ—à–Ω–æ! ü§ë –¢–≤–æ–π –±–∞–ª–∞–Ω—Å —É–∂–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ü–µ–ª—ã—Ö: {balance}')
    except:
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üö´ –ù–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
@bot.message_handler(regexp='–ú–æ–π –±–∞–ª–∞–Ω—Å ü§ë')
def myBalance(message):
    with sq.connect("money.db") as con:
        cur = con.cursor()
        balance = cur.execute(f"SELECT balance FROM money WHERE id = {message.chat.id}")
        balance = cur.fetchone()[0]
        bot.send_message(message.chat.id, f'ü§ë –¢–≤–æ–π –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ü–µ–ª—ã—Ö: {balance} üíµ')

@bot.message_handler(regexp='–û—á–∏—Å—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å')
def removeMoney(message):
    with sq.connect("money.db") as con:
        cur = con.cursor()
        balance = cur.execute(f"SELECT balance FROM money WHERE id = {message.chat.id}")
        balance = cur.fetchone()[0]
        bot.send_message(message.chat.id, f'–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ö–æ—á–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –≤ {balance} üíµ', reply_markup=accept)

@bot.message_handler(regexp='–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå')
def removeLastStep(message):
    with sq.connect("money.db") as con:
        cur = con.cursor()
        cur.execute(f"select lastStep from money where id = {message.chat.id}")
        lastStep = cur.fetchone()[0]
    bot.send_message(message.chat.id, f'–û—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ {lastStep} üí∏ ?', reply_markup=removeLastStepBoard)

@bot.callback_query_handler(func=lambda call:True)
def check(call):
    with sq.connect("money.db") as con:
        cur = con.cursor()
        if call.data == 'yes':
            cur.execute(f"UPDATE money SET balance = 0 WHERE id = {call.message.chat.id}")
            balance = cur.execute(f"SELECT balance FROM money WHERE id = {call.message.chat.id}")
            balance = cur.fetchone()[0]
            bot.send_message(call.message.chat.id, '–¢–≤–æ–π –±–∞–ª–∞–Ω—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω.')
        elif call.data == 'no':
            bot.send_message(call.message.chat.id, '–¢–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω.')
        elif call.data == 'removeLastStepYes':
            cur.execute(f"select lastStep from money where id = {call.message.chat.id}")
            lastStep = cur.fetchone()[0]
            cur.execute(f"update money set balance = balance - {lastStep} where id = {call.message.chat.id}")
            cur.execute(f"update money set lastStep = 0 where id = {call.message.chat.id}")
            bot.send_message(call.message.chat.id, '–£—Å–ø–µ—à–Ω–æ! –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        elif call.data == 'removeLastStepNo':
            bot.send_message(call.message.chat.id, '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
bot.infinity_polling(True)